---
import type { SanityBlockContent } from '@colourfully-digital/types/sanity';

interface Props {
  content: SanityBlockContent;
  class?: string;
}

const { content, class: className = '' } = Astro.props;

// Simple function to render portable text blocks
function renderBlock(block: any): string {
  if (!block || typeof block !== 'object') {
    return '';
  }

  if (block._type === 'block') {
    const text = block.children?.map((child: any) => child.text).join('') || '';
    const style = block.style || 'normal';
    
    switch (style) {
      case 'h1':
        return `<h1 class="text-4xl font-bold text-gray-900 mb-6">${text}</h1>`;
      case 'h2':
        return `<h2 class="text-3xl font-bold text-gray-900 mb-4">${text}</h2>`;
      case 'h3':
        return `<h3 class="text-2xl font-bold text-gray-900 mb-3">${text}</h3>`;
      case 'h4':
        return `<h4 class="text-xl font-bold text-gray-900 mb-2">${text}</h4>`;
      default:
        return `<p class="text-gray-600 mb-4">${text}</p>`;
    }
  }

  if (block._type === 'image') {
    const alt = block.alt || '';
    const url = block.asset?.url || '';
    return `<img src="${url}" alt="${alt}" class="w-full h-auto rounded-lg shadow-md mb-4" />`;
  }

  return '';
}

const renderedContent = Array.isArray(content) 
  ? content.map(renderBlock).join('') 
  : '';
---

<div class={className} set:html={renderedContent} />
